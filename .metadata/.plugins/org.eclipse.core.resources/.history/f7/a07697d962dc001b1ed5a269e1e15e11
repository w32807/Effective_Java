package enumWithAnnotation.item38;

import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

// 상수에 따라 분기가 되는 Enum
// 인터페이스를 상속받는 Enum 클래스
public enum BasicOperation implements Operation{
	PLUS("+"){public double apply(double x, double y) {return x + y;}}, 
	MINUS("-"){public double apply(double x, double y) {return x - y;}}, 
	TIMES("*"){public double apply(double x, double y) {return x * y;}}, 
	DIVIDE("/"){public double apply(double x, double y) {return x / y;}};
	
	private String symbol;
	
	BasicOperation(String symbol) {this.symbol = symbol;}
	
	public abstract double apply(double x, double y);
	
	@Override
	public String toString() {return symbol;}
	
	// 문자열로 Enum 객체 얻기
	private static final Map<String, BasicOperation> stringToEnum = Stream.of(values()).collect(Collectors.toMap(Object::toString, e->e));
	
	public static Optional<BasicOperation> fromString(String symbol){
		return Optional.ofNullable(stringToEnum.get(symbol));
	}
}
